<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Rektify: Therapy for Degens</title>
   <meta name="description" content="The first AI-powered crypto trading therapist. From Terminal FOMO to Zen Master - we've got you covered.">
   <meta property="og:title" content="Rektify: Therapy for Degens">
   <meta property="og:description" content="Getting rekt is inevitable. Staying rekt is optional.">
   <meta property="og:image" content="https://rektify.vercel.app/og-image.png">
   <meta name="twitter:card" content="summary_large_image">
   
   <style>
       /* Import Google Font */
       @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap');
       
       /* Base styles */
       * {
           margin: 0;
           padding: 0;
           box-sizing: border-box;
       }
       
       body {
           font-family: 'Space Grotesk', sans-serif;
           background: #000000;
           color: #ffffff;
           overflow-x: hidden;
           line-height: 1.6;
       }
       
       /* Enhanced animated gradient background */
       .background-gradient {
           position: fixed;
           top: 0;
           left: 0;
           width: 100%;
           height: 100%;
           background: 
               radial-gradient(circle at 20% 50%, rgba(255, 0, 110, 0.2) 0%, transparent 50%),
               radial-gradient(circle at 80% 80%, rgba(131, 56, 236, 0.2) 0%, transparent 50%),
               radial-gradient(circle at 40% 30%, rgba(6, 255, 165, 0.1) 0%, transparent 50%);
           z-index: -3;
           animation: pulseGradient 8s ease-in-out infinite;
       }
       
       @keyframes pulseGradient {
           0%, 100% { opacity: 0.5; }
           50% { opacity: 1; }
       }
       
       /* Enhanced floating particles with glow */
       .particles {
           position: fixed;
           top: 0;
           left: 0;
           width: 100%;
           height: 100%;
           z-index: -1;
           overflow: hidden;
           pointer-events: none; /* Allows clicks to pass through */
       }
       
       .particle {
           position: absolute;
           width: 2px;
           height: 2px;
           background: #06ffa5;
           border-radius: 50%;
           box-shadow: 0 0 10px #06ffa5, 0 0 20px #06ffa5; /* More glow */
           animation: float 20s infinite linear;
           opacity: 0;
       }
       
       @keyframes float {
           0% {
               transform: translateY(100vh) translateX(0) scale(0);
               opacity: 0;
           }
           10% {
               opacity: 0.8;
               transform: translateY(90vh) translateX(10px) scale(1);
           }
           90% {
               opacity: 0.8;
           }
           100% {
               transform: translateY(-100px) translateX(100px) scale(0);
               opacity: 0;
           }
       }
       
       /* Grid overlay effect */
       .grid-overlay {
           position: fixed;
           top: 0;
           left: 0;
           width: 100%;
           height: 100%;
           background-image: 
               linear-gradient(rgba(255, 255, 255, 0.03) 1px, transparent 1px),
               linear-gradient(90deg, rgba(255, 255, 255, 0.03) 1px, transparent 1px);
           background-size: 50px 50px;
           z-index: -2;
           animation: gridMove 10s linear infinite;
       }
       
       @keyframes gridMove {
           0% { transform: translate(0, 0); }
           100% { transform: translate(50px, 50px); }
       }
       
       .container {
           max-width: 1200px;
           margin: 0 auto;
           padding: 0 20px;
       }
       
       /* Enhanced Header with glass effect */
       .header {
           padding: 20px 0;
           position: fixed;
           top: 0;
           left: 0;
           right: 0;
           z-index: 1000;
           background: rgba(0, 0, 0, 0.5);
           backdrop-filter: blur(20px);
           border-bottom: 1px solid rgba(255, 255, 255, 0.1);
           transition: all 0.3s ease;
       }
       
       .header.scrolled {
           background: rgba(0, 0, 0, 0.8);
           padding: 15px 0;
           box-shadow: 0 5px 20px rgba(0,0,0,0.5);
       }
       
       .nav {
           display: flex;
           justify-content: space-between;
           align-items: center;
       }
       
       .logo {
           font-size: 1.8rem;
           font-weight: 700;
           background: linear-gradient(45deg, #06ffa5, #8338ec, #ff006e);
           -webkit-background-clip: text;
           -webkit-text-fill-color: transparent;
           background-clip: text;
           animation: logoShift 3s ease-in-out infinite;
           text-decoration: none; /* Ensure logo is not underlined if it's an anchor */
       }
       
       @keyframes logoShift {
           0%, 100% { filter: hue-rotate(0deg); }
           50% { filter: hue-rotate(30deg); }
       }
       
       .nav-links {
           display: flex;
           gap: 30px;
           list-style: none;
       }
       
       .nav-links a {
           color: #ffffff;
           text-decoration: none;
           font-weight: 500;
           transition: all 0.3s ease;
           position: relative;
           padding: 5px 0;
       }
       
       .nav-links a::after {
           content: '';
           position: absolute;
           bottom: -2px;
           left: 0;
           width: 0;
           height: 2px;
           background: #06ffa5;
           transition: width 0.3s ease;
       }
       
       .nav-links a:hover::after {
           width: 100%;
       }
       
       .nav-links a:hover {
           color: #06ffa5;
           text-shadow: 0 0 10px #06ffa5;
       }

       /* Mobile navigation toggle */
       .menu-toggle {
           display: none; /* Hidden by default on larger screens */
           flex-direction: column;
           justify-content: space-between;
           width: 30px;
           height: 20px;
           cursor: pointer;
           z-index: 1001; /* Above nav links when open */
       }

       .menu-toggle span {
           display: block;
           width: 100%;
           height: 3px;
           background: #ffffff;
           border-radius: 2px;
           transition: all 0.3s ease;
       }

       .menu-toggle.open span:nth-child(1) {
           transform: rotate(45deg) translate(5px, 5px);
       }

       .menu-toggle.open span:nth-child(2) {
           opacity: 0;
       }

       .menu-toggle.open span:nth-child(3) {
           transform: rotate(-45deg) translate(5px, -5px);
       }

       /* Mobile menu overlay */
       .nav-links.mobile-menu {
           display: none; /* Hide by default */
           flex-direction: column;
           position: fixed;
           top: 0;
           right: 0;
           width: 70%;
           height: 100%;
           background: rgba(0, 0, 0, 0.9);
           backdrop-filter: blur(30px);
           padding-top: 100px;
           gap: 20px;
           align-items: center;
           transform: translateX(100%);
           transition: transform 0.4s ease-out;
           border-left: 1px solid rgba(255,255,255,0.1);
       }

       .nav-links.mobile-menu.open {
           transform: translateX(0);
           display: flex;
       }
       
       /* Enhanced Hero Section */
       .hero {
           padding: 180px 0 80px;
           text-align: center;
           position: relative;
       }
       
       .hero-title {
           font-size: clamp(3rem, 8vw, 6rem);
           font-weight: 700;
           margin-bottom: 20px;
           background: linear-gradient(135deg, #ffffff, #06ffa5, #8338ec, #ff006e);
           -webkit-background-clip: text;
           -webkit-text-fill-color: transparent;
           background-clip: text;
           background-size: 200% 200%;
           animation: gradientMove 4s ease infinite;
           line-height: 1.1;
           letter-spacing: -2px;
       }
       
       @keyframes gradientMove {
           0% { background-position: 0% 50%; }
           50% { background-position: 100% 50%; }
           100% { background-position: 0% 50%; }
       }
       
       .hero-subtitle {
           font-size: 1.5rem;
           font-weight: 300;
           margin-bottom: 30px;
           color: #cccccc;
           font-style: italic;
           opacity: 0.8;
           animation: fadeInUp 1s ease 0.5s both;
       }
       
       @keyframes fadeInUp {
           from {
               opacity: 0;
               transform: translateY(30px);
           }
           to {
               opacity: 1;
               transform: translateY(0);
           }
       }
       
       .hero-description {
           font-size: 1.3rem;
           margin-bottom: 50px;
           color: #aaaaaa;
           max-width: 700px;
           margin-left: auto;
           margin-right: auto;
           animation: fadeInUp 1s ease 0.7s both;
       }
       
       /* Enhanced CTA Buttons */
       .cta-buttons {
           display: flex;
           gap: 20px;
           justify-content: center;
           flex-wrap: wrap;
           margin-bottom: 60px;
           animation: fadeInUp 1s ease 0.9s both;
       }
       
       .btn {
           padding: 18px 40px;
           border: none;
           border-radius: 50px;
           font-family: inherit;
           font-size: 1.1rem;
           font-weight: 600;
           cursor: pointer;
           transition: all 0.3s ease;
           text-decoration: none;
           display: inline-block;
           position: relative;
           overflow: hidden;
           z-index: 1; /* For the pseudo-element ripple */
       }
       
       .btn::before {
           content: '';
           position: absolute;
           top: 50%;
           left: 50%;
           width: 0;
           height: 0;
           border-radius: 50%;
           background: rgba(255, 255, 255, 0.1);
           transform: translate(-50%, -50%);
           transition: width 0.6s, height 0.6s;
           z-index: -1;
       }
       
       .btn:hover::before {
           width: 300px;
           height: 300px;
       }
       
       .btn-primary {
           background: linear-gradient(135deg, #ff006e, #8338ec);
           color: white;
           box-shadow: 0 5px 30px rgba(255, 0, 110, 0.4);
           transform: translateZ(0);
       }
       
       .btn-primary:hover {
           transform: translateY(-3px) translateZ(0);
           box-shadow: 0 10px 40px rgba(255, 0, 110, 0.6);
       }
       
       .btn-secondary {
           background: rgba(6, 255, 165, 0.1);
           color: #06ffa5;
           border: 2px solid #06ffa5;
           box-shadow: 0 0 20px rgba(6, 255, 165, 0.2);
       }
       
       .btn-secondary:hover {
           background: #06ffa5;
           color: #000000;
           transform: translateY(-3px);
           box-shadow: 0 10px 40px rgba(6, 255, 165, 0.4);
       }
       
       /* Enhanced Stats Section */
       .stats {
           display: flex;
           justify-content: center;
           gap: 80px;
           margin-bottom: 80px;
           flex-wrap: wrap;
       }
       
       .stat {
           text-align: center;
           animation: fadeInUp 1s ease 1.1s both;
       }
       
       .stat-number {
           font-size: 3.5rem;
           font-weight: 700;
           background: linear-gradient(45deg, #06ffa5, #8338ec);
           -webkit-background-clip: text;
           -webkit-text-fill-color: transparent;
           background-clip: text;
           display: block;
           text-shadow: 0 0 30px rgba(6, 255, 165, 0.5);
       }
       
       .stat-label {
           font-size: 1rem;
           color: #888888;
           margin-top: 5px;
           text-transform: uppercase;
           letter-spacing: 2px;
       }
       
       /* Enhanced Features Section */
       .features {
           padding: 100px 0;
           background: linear-gradient(180deg, rgba(255, 255, 255, 0.02) 0%, rgba(131, 56, 236, 0.05) 100%);
           border-top: 1px solid rgba(255, 255, 255, 0.1);
           border-bottom: 1px solid rgba(255, 255, 255, 0.1);
           position: relative;
       }
       
       .features::before {
           content: '';
           position: absolute;
           top: 0;
           left: 0;
           right: 0;
           height: 1px;
           background: linear-gradient(90deg, transparent, #06ffa5, transparent);
           animation: scanLine 3s ease-in-out infinite;
       }
       
       @keyframes scanLine {
           0% { transform: translateX(-100%); }
           100% { transform: translateX(100%); }
       }
       
       .features-title {
           text-align: center;
           font-size: clamp(2rem, 5vw, 3rem); /* Responsive font size */
           font-weight: 700;
           margin-bottom: 60px;
           color: #ffffff;
           text-transform: uppercase;
           letter-spacing: 3px;
       }
       
       .features-grid {
           display: grid;
           grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
           gap: 40px;
       }
       
       .feature-card {
           background: rgba(255, 255, 255, 0.03);
           border: 1px solid rgba(255, 255, 255, 0.1);
           border-radius: 20px;
           padding: 40px 30px;
           text-align: center;
           transition: all 0.5s ease;
           backdrop-filter: blur(10px);
           position: relative;
           overflow: hidden;
       }
       
       .feature-card::before {
           content: '';
           position: absolute;
           top: -50%;
           left: -50%;
           width: 200%;
           height: 200%;
           background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
           opacity: 0;
           transition: opacity 0.3s ease;
           pointer-events: none;
       }
       
       .feature-card:hover::before {
           opacity: 1;
       }
       
       .feature-card:hover {
           transform: translateY(-10px) scale(1.02);
           border-color: #06ffa5;
           box-shadow: 0 20px 40px rgba(6, 255, 165, 0.2);
           background: rgba(6, 255, 165, 0.05);
       }
       
       .feature-icon {
           font-size: 4rem;
           margin-bottom: 20px;
           display: block;
           filter: drop-shadow(0 0 20px currentColor);
           animation: iconFloat 3s ease-in-out infinite;
       }
       
       .feature-card:nth-child(2) .feature-icon {
           animation-delay: 0.5s;
       }
       
       .feature-card:nth-child(3) .feature-icon {
           animation-delay: 1s;
       }
       
       @keyframes iconFloat {
           0%, 100% { transform: translateY(0); }
           50% { transform: translateY(-10px); }
       }
       
       .feature-title {
           font-size: 1.5rem;
           font-weight: 600;
           margin-bottom: 15px;
           color: #ffffff;
           text-transform: uppercase;
           letter-spacing: 1px;
       }
       
       .feature-description {
           color: #cccccc;
           line-height: 1.8;
       }
       
       /* Enhanced Demo Section */
       .demo {
           padding: 100px 0;
           text-align: center;
           position: relative;
       }
       
       .demo-title {
           font-size: clamp(2rem, 5vw, 3rem); /* Responsive font size */
           font-weight: 700;
           margin-bottom: 40px;
           color: #ffffff;
           text-transform: uppercase;
           letter-spacing: 3px;
       }
       
       .demo-container {
           display: grid;
           grid-template-columns: 1fr 1fr; /* Default for larger screens */
           gap: 40px;
           max-width: 1000px;
           margin: 0 auto;
       }
       
       .demo-box {
           background: rgba(255, 255, 255, 0.02);
           border: 1px solid rgba(255, 255, 255, 0.1);
           border-radius: 20px;
           padding: 40px;
           backdrop-filter: blur(10px);
           position: relative;
           overflow: hidden;
       }
       
       .demo-box::before {
           content: '';
           position: absolute;
           top: -2px;
           left: -2px;
           right: -2px;
           bottom: -2px;
           background: linear-gradient(45deg, #ff006e, #8338ec, #06ffa5);
           border-radius: 20px;
           opacity: 0;
           z-index: -1;
           transition: opacity 0.3s ease;
       }
       
       .demo-box:hover::before {
           opacity: 0.5;
       }
       
       .demo-input {
           width: 100%;
           padding: 20px;
           border: 2px solid rgba(255, 255, 255, 0.1);
           border-radius: 15px;
           background: rgba(0, 0, 0, 0.5);
           color: #ffffff;
           font-family: inherit;
           font-size: 1rem;
           margin-bottom: 20px;
           resize: vertical;
           min-height: 150px;
           transition: all 0.3s ease;
       }
       
       .demo-input::placeholder {
           color: #666666;
       }
       
       .demo-input:focus {
           outline: none;
           border-color: #06ffa5;
           box-shadow: 0 0 30px rgba(6, 255, 165, 0.3);
           background: rgba(6, 255, 165, 0.05);
       }
       
       .demo-result {
           background: rgba(255, 0, 110, 0.05);
           border: 2px solid rgba(255, 0, 110, 0.2);
           border-radius: 15px;
           padding: 25px;
           margin-top: 20px; /* Adjusted margin */
           text-align: left;
           display: none;
           min-height: 250px;
           position: relative;
           overflow: hidden;
       }
       
       .demo-result::before {
           content: '';
           position: absolute;
           top: 0;
           left: -100%;
           width: 100%;
           height: 100%;
           background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
           animation: shimmer 2s infinite;
       }
       
       @keyframes shimmer {
           0% { left: -100%; }
           100% { left: 100%; }
       }
       
       .demo-result.show {
           display: block;
           animation: resultAppear 0.5s ease;
       }
       
       @keyframes resultAppear {
           from {
               opacity: 0;
               transform: translateY(30px) scale(0.9);
           }
           to {
               opacity: 1;
               transform: translateY(0) scale(1);
           }
       }
       
       .diagnosis {
           font-size: 1.5rem;
           font-weight: 700;
           background: linear-gradient(45deg, #ff006e, #ff4590);
           -webkit-background-clip: text;
           -webkit-text-fill-color: transparent;
           background-clip: text;
           margin-bottom: 15px;
           text-transform: uppercase;
           letter-spacing: 1px;
       }
       
       .severity {
           font-size: 1.2rem;
           color: #06ffa5;
           margin-bottom: 20px;
           font-weight: 600;
       }
       
       .therapy-tip {
           background: linear-gradient(135deg, rgba(6, 255, 165, 0.1), rgba(6, 255, 165, 0.05));
           border-left: 4px solid #06ffa5;
           padding: 15px 20px;
           border-radius: 10px;
           font-style: italic;
           margin-bottom: 20px;
           position: relative;
           overflow: hidden;
           color: #c0fddc; /* Lighter green for readability */
       }
       
       .therapy-tip::before {
           content: '💡';
           position: absolute;
           right: 10px;
           top: 10px;
           font-size: 1.5rem;
           opacity: 0.5;
       }
       
       .playlist {
           background: linear-gradient(135deg, rgba(131, 56, 236, 0.1), rgba(131, 56, 236, 0.05));
           border: 2px solid rgba(131, 56, 236, 0.3);
           border-radius: 15px;
           padding: 20px;
           margin-top: 20px;
           position: relative;
       }
       
       .playlist::before {
           content: '🎵';
           position: absolute;
           right: 15px;
           top: 15px;
           font-size: 2rem;
           opacity: 0.3;
       }
       
       .playlist-title {
           font-weight: 700;
           color: #8338ec;
           margin-bottom: 15px;
           font-size: 1.1rem;
           text-transform: uppercase;
           letter-spacing: 1px;
       }
       
       .playlist-item {
           font-size: 0.95rem;
           color: #cccccc;
           margin-bottom: 8px;
           padding-left: 20px;
           position: relative;
       }
       
       .playlist-item::before {
           content: '▶';
           position: absolute;
           left: 0;
           color: #8338ec;
       }
       
       /* Enhanced Meme Generator */
       .meme-generator {
           background: rgba(255, 255, 255, 0.02);
           border: 1px solid rgba(255, 255, 255, 0.1);
           border-radius: 20px;
           padding: 40px;
           backdrop-filter: blur(10px);
           position: relative;
       }
       
       .meme-preview {
           background: linear-gradient(135deg, #0a0a0a, #1a1a1a);
           border: 3px solid transparent;
           border-image: linear-gradient(45deg, #ff006e, #8338ec, #06ffa5) 1; /* Gradient border */
           border-radius: 20px;
           padding: 20px; /* Reduced padding for image */
           text-align: center;
           margin-bottom: 25px;
           min-height: 300px;
           display: flex;
           align-items: center;
           justify-content: center;
           overflow: hidden; /* Ensure image doesn't overflow */
           position: relative;
       }

       .meme-preview.loading::after {
           content: '';
           position: absolute;
           width: 50px;
           height: 50px;
           border: 5px solid rgba(255, 255, 255, 0.3);
           border-top-color: #06ffa5;
           border-radius: 50%;
           animation: spin 1s linear infinite;
       }

       @keyframes spin {
           to { transform: rotate(360deg); }
       }

       .meme-preview img {
           max-width: 100%;
           max-height: 100%;
           border-radius: 15px; /* Rounded corners for image */
           display: block; /* Remove extra space below image */
       }
       
       .meme-input {
           width: 100%;
           padding: 18px;
           border: 2px solid rgba(255, 255, 255, 0.1);
           border-radius: 15px;
           background: rgba(0, 0, 0, 0.5);
           color: #ffffff;
           font-family: inherit;
           font-size: 1rem;
           margin-bottom: 20px;
           transition: all 0.3s ease;
       }
       
       .meme-input::placeholder {
           color: #666666;
       }
       
       .meme-input:focus {
           outline: none;
           border-color: #ff006e;
           box-shadow: 0 0 30px rgba(255, 0, 110, 0.3);
           background: rgba(255, 0, 110, 0.05);
       }

       /* Message Box for alerts */
       .message-box {
           position: fixed;
           top: 50%;
           left: 50%;
           transform: translate(-50%, -50%);
           background: rgba(255, 255, 255, 0.1);
           backdrop-filter: blur(15px);
           border: 1px solid rgba(255, 255, 255, 0.2);
           border-radius: 15px;
           padding: 30px;
           box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
           z-index: 2000;
           display: none; /* Hidden by default */
           flex-direction: column;
           align-items: center;
           justify-content: center;
           max-width: 400px;
           text-align: center;
       }

       .message-box p {
           font-size: 1.1rem;
           margin-bottom: 20px;
           color: #ffffff;
       }

       .message-box button {
           padding: 10px 25px;
           background: linear-gradient(45deg, #8338ec, #ff006e);
           color: white;
           border: none;
           border-radius: 30px;
           cursor: pointer;
           font-size: 1rem;
           font-weight: 600;
           transition: all 0.3s ease;
       }

       .message-box button:hover {
           transform: translateY(-2px);
           box-shadow: 0 5px 15px rgba(131, 56, 236, 0.4);
       }

       /* Footer */
       .footer {
           padding: 60px 0;
           text-align: center;
           border-top: 1px solid rgba(255, 255, 255, 0.1);
           color: #aaaaaa;
           font-size: 0.9rem;
           margin-top: 80px;
       }
       
       .footer-links {
           list-style: none;
           display: flex;
           justify-content: center;
           gap: 30px;
           margin-bottom: 20px;
       }
       
       .footer-links a {
           color: #cccccc;
           text-decoration: none;
           transition: color 0.3s ease;
       }
       
       .footer-links a:hover {
           color: #06ffa5;
           text-shadow: 0 0 5px #06ffa5;
       }
       
       /* Responsive Adjustments */
       @media (max-width: 768px) {
           .nav-links {
               display: none; /* Hide desktop nav links on smaller screens */
           }

           .menu-toggle {
               display: flex; /* Show mobile menu toggle */
           }

           .hero {
               padding-top: 120px; /* Adjust hero padding for mobile header */
           }

           .hero-subtitle {
               font-size: 1.2rem;
           }

           .hero-description {
               font-size: 1rem;
           }

           .cta-buttons {
               flex-direction: column;
               align-items: center;
           }

           .btn {
               width: 80%;
               max-width: 300px;
           }

           .stats {
               flex-direction: column;
               gap: 40px;
           }

           .stat-number {
               font-size: 3rem;
           }

           .features-title, .demo-title {
               font-size: 2.2rem;
           }

           .demo-container {
               grid-template-columns: 1fr; /* Stack columns on smaller screens */
           }

           .demo-box, .meme-generator {
               padding: 30px 20px;
           }

           .demo-input, .meme-input {
               min-height: 120px;
               padding: 15px;
           }
           .meme-preview {
               min-height: 250px;
           }

           .diagnosis {
               font-size: 1.3rem;
           }
           .severity {
               font-size: 1rem;
           }
           .therapy-tip, .playlist-item {
               font-size: 0.9rem;
           }
       }

       @media (max-width: 480px) {
           .header {
               padding: 10px 0;
           }
           .logo {
               font-size: 1.5rem;
           }
           .hero-title {
               font-size: 2.5rem;
           }
           .features-title, .demo-title {
               font-size: 1.8rem;
           }
       }
   </style>
   <!-- Font Awesome for icons -->
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" xintegrity="sha512-Fo3rlalKx/K3u+wB2u/9GfFw/1+v/2aD7+1F7eK6hL4qg5k+P7/jJ+M8p6K3r5K9yW3/P/2Q3m3+5N3/gQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body>
   <div class="background-gradient"></div>
   <div class="particles"></div>
   <div class="grid-overlay"></div>

   <header class="header" id="main-header">
       <div class="container nav">
           <a href="#" class="logo">Rektify</a>
           <nav>
               <ul class="nav-links" id="nav-links">
                   <li><a href="#hero">Home</a></li>
                   <li><a href="#features">Features</a></li>
                   <li><a href="#demo">Demo</a></li>
                   <li><a href="#meme-generator">Memes</a></li>
                   <li><a href="#contact">Contact</a></li>
               </ul>
               <div class="menu-toggle" id="menu-toggle">
                   <span></span>
                   <span></span>
                   <span></span>
               </div>
           </nav>
       </div>
   </header>

   <main>
       <section class="hero" id="hero">
           <div class="container">
               <h1 class="hero-title">Rektify</h1>
               <p class="hero-subtitle">Therapy for Degens.</p>
               <p class="hero-description">The first AI-powered crypto trading therapist. From Terminal FOMO to Zen Master - we've got you covered. Getting rekt is inevitable. Staying rekt is optional.</p>
               <div class="cta-buttons">
                   <a href="#demo" class="btn btn-primary">Analyze My Rekt Now</a>
                   <a href="#features" class="btn btn-secondary">Learn More</a>
               </div>
               <div class="stats">
                   <div class="stat">
                       <span class="stat-number" data-target="99">0</span>
                       <span class="stat-label">% DeGen Success Rate</span>
                   </div>
                   <div class="stat">
                       <span class="stat-number" data-target="10000">0</span>
                       <span class="stat-label">Rekt Cases Analyzed</span>
                   </div>
                   <div class="stat">
                       <span class="stat-number" data-target="24">0</span>
                       <span class="stat-label">/7 AI Support</span>
                   </div>
               </div>
           </div>
       </section>

       <section class="features" id="features">
           <div class="container">
               <h2 class="features-title">Why Rektify?</h2>
               <div class="features-grid">
                   <div class="feature-card">
                       <i class="feature-icon fa-solid fa-brain" style="color: #06ffa5;"></i>
                       <h3 class="feature-title">AI Powered Insights</h3>
                       <p class="feature-description">Leverage cutting-edge AI to diagnose your trading psychology issues, from FOMO to FUD, paper hands to diamond hands.</p>
                   </div>
                   <div class="feature-card">
                       <i class="feature-icon fa-solid fa-hand-holding-heart" style="color: #8338ec;"></i>
                       <h3 class="feature-title">Personalized Therapy</h3>
                       <p class="feature-description">Receive tailored advice, coping mechanisms, and actionable strategies to overcome emotional trading and achieve mental clarity.</p>
                   </div>
                   <div class="feature-card">
                       <i class="feature-icon fa-solid fa-chart-line" style="color: #ff006e;"></i>
                       <h3 class="feature-title">Market Sentiment Analysis</h3>
                       <p class="feature-description">Understand the broader market's emotional state and how it might be influencing your own decisions, helping you stay rational.</p>
                   </div>
               </div>
           </div>
       </section>

       <section class="demo" id="demo">
           <div class="container">
               <h2 class="demo-title">Experience Rektify AI</h2>
               <div class="demo-container">
                   <div class="demo-box">
                       <h3>Tell us your latest trading pain:</h3>
                       <textarea id="rekt-input" class="demo-input" placeholder="e.g., 'I bought Dogecoin at the top and now I'm down 90% and can't sleep.'"></textarea>
                       <button id="analyze-button" class="btn btn-primary">Analyze My Rekt</button>
                   </div>
                   <div class="demo-box">
                       <h3>Your Rektify Diagnosis:</h3>
                       <div id="rekt-result" class="demo-result">
                           <p class="diagnosis" id="diagnosis-text"></p>
                           <p class="severity" id="severity-text"></p>
                           <div class="therapy-tip" id="therapy-tip-text"></div>
                           <div class="playlist" id="playlist-container">
                               <p class="playlist-title">Your Personalized Zen Playlist:</p>
                               <ul id="playlist-items">
                                   <!-- Playlist items will be injected here -->
                               </ul>
                           </div>
                       </div>
                   </div>
               </div>
           </div>
       </section>

       <section class="demo" id="meme-generator">
           <div class="container">
               <h2 class="demo-title">Degen Meme Generator</h2>
               <div class="meme-generator">
                   <div class="meme-preview" id="meme-preview">
                       <p id="meme-placeholder">Your generated meme will appear here!</p>
                       <img id="generated-meme-image" src="" alt="Generated Degen Meme" style="display: none;" onerror="this.onerror=null; this.src='https://placehold.co/400x300/333333/ffffff?text=Meme+Failed+to+Load'; this.style.display='block'; this.style.opacity=0.5;">
                   </div>
                   <input type="text" id="meme-prompt" class="meme-input" placeholder="Describe the meme you want (e.g., 'A sad dog holding a Bitcoin, with text: My portfolio vs. my dreams')">
                   <button id="generate-meme-button" class="btn btn-primary">Generate Meme</button>
               </div>
           </div>
       </section>
   </main>

   <footer class="footer" id="contact">
       <div class="container">
           <ul class="footer-links">
               <li><a href="#">Privacy Policy</a></li>
               <li><a href="#">Terms of Service</a></li>
               <li><a href="#">Support</a></li>
           </ul>
           <p>© 2025 Rektify. All rights reserved. Built for the rekt, by the degens.</p>
       </div>
   </footer>

   <div id="message-box" class="message-box">
       <p id="message-box-text"></p>
       <button id="message-box-ok">OK</button>
   </div>

   <script>
       document.addEventListener('DOMContentLoaded', () => {
           // --- Global Utility Functions ---
           /**
            * Displays a custom message box instead of alert().
            * @param {string} message The message to display.
            */
           function showMessageBox(message) {
               const msgBox = document.getElementById('message-box');
               const msgText = document.getElementById('message-box-text');
               const msgOkBtn = document.getElementById('message-box-ok');

               msgText.textContent = message;
               msgBox.style.display = 'flex';

               msgOkBtn.onclick = () => {
                   msgBox.style.display = 'none';
               };
           }

           /**
            * Implements a typewriter effect on a given element.
            * @param {HTMLElement} element The HTML element to apply the effect to.
            * @param {string} text The full text to type.
            * @param {number} speed The typing speed in milliseconds per character.
            * @returns {Promise<void>} A promise that resolves when typing is complete.
            */
           function typeWriterEffect(element, text, speed = 30) {
               element.textContent = ''; // Clear existing text
               let i = 0;
               return new Promise(resolve => {
                   function type() {
                       if (i < text.length) {
                           element.textContent += text.charAt(i);
                           i++;
                           setTimeout(type, speed);
                       } else {
                           resolve();
                       }
                   }
                   type();
               });
           }

           // --- Header Scroll Effect ---
           const header = document.getElementById('main-header');
           window.addEventListener('scroll', () => {
               if (window.scrollY > 50) {
                   header.classList.add('scrolled');
               } else {
                   header.classList.remove('scrolled');
               }
           });

           // --- Mobile Menu Toggle ---
           const menuToggle = document.getElementById('menu-toggle');
           const navLinks = document.getElementById('nav-links');

           menuToggle.addEventListener('click', () => {
               navLinks.classList.toggle('open');
               menuToggle.classList.toggle('open');
               // Disable body scroll when menu is open
               if (navLinks.classList.contains('open')) {
                   document.body.style.overflow = 'hidden';
               } else {
                   document.body.style.overflow = '';
               }
           });

           // Close mobile menu when a link is clicked
           navLinks.querySelectorAll('a').forEach(link => {
               link.addEventListener('click', () => {
                   navLinks.classList.remove('open');
                   menuToggle.classList.remove('open');
                   document.body.style.overflow = '';
               });
           });


           // --- Particle Animation (Dynamic Generation) ---
           const particlesContainer = document.querySelector('.particles');
           const numParticles = 50;

           for (let i = 0; i < numParticles; i++) {
               const particle = document.createElement('div');
               particle.classList.add('particle');
               particle.style.left = `${Math.random() * 100}vw`; // Random horizontal position
               particle.style.animationDelay = `${Math.random() * 20}s`; // Random start delay
               particle.style.animationDuration = `${20 + Math.random() * 10}s`; // Random duration
               particlesContainer.appendChild(particle);
           }

           // --- Dynamic Stats Animation ---
           const stats = document.querySelectorAll('.stat-number');

           const animateStat = (entry) => {
               if (entry.isIntersecting) {
                   const target = parseInt(entry.target.dataset.target);
                   let current = 0;
                   const increment = target / 200; // Adjust for smoother or faster animation

                   const updateCounter = () => {
                       if (current < target) {
                           current += increment;
                           entry.target.textContent = Math.ceil(current);
                           requestAnimationFrame(updateCounter);
                       } else {
                           entry.target.textContent = target; // Ensure final value is exact
                       }
                   };
                   updateCounter();
                   observer.unobserve(entry.target); // Stop observing once animated
               }
           };

           const observer = new IntersectionObserver((entries) => {
               entries.forEach(animateStat);
           }, { threshold: 0.5 }); // Trigger when 50% of the element is visible

           stats.forEach(stat => {
               observer.observe(stat);
           });

           // --- Demo Section Functionality (AI Therapy) ---
           const rektInput = document.getElementById('rekt-input');
           const analyzeButton = document.getElementById('analyze-button');
           const rektResult = document.getElementById('rekt-result');
           const diagnosisText = document.getElementById('diagnosis-text');
           const severityText = document.getElementById('severity-text');
           const therapyTipText = document.getElementById('therapy-tip-text');
           const playlistItems = document.getElementById('playlist-items');

           analyzeButton.addEventListener('click', async () => {
               const prompt = rektInput.value.trim();
               if (!prompt) {
                   showMessageBox("Please describe your trading pain to get a diagnosis.");
                   return;
               }

               // Show loading state and clear previous results
               rektResult.classList.remove('show');
               diagnosisText.textContent = 'Analyzing...';
               severityText.textContent = '';
               therapyTipText.textContent = 'Please wait, our AI therapist is working its magic...';
               playlistItems.innerHTML = ''; // Clear playlist
               rektResult.classList.add('show'); // Show result container immediately

               // Simulate AI API call with a delay
               await new Promise(resolve => setTimeout(resolve, 2000));

               try {
                   // Simulate Gemini API call for text generation
                   // In a real scenario, this would be a fetch call to a backend endpoint
                   // that then calls the Gemini API securely.
                   const chatHistory = [];
                   chatHistory.push({ role: "user", parts: [{ text: `Analyze this crypto trading pain point and provide a diagnosis, severity (low, medium, high rekt), a therapy tip, and 3 calming crypto-themed song titles for a playlist. Format as JSON: {"diagnosis": "...", "severity": "...", "therapyTip": "...", "playlist": ["song1", "song2", "song3"]}. Trading pain: "${prompt}"` }] });
                   const payload = { 
                       contents: chatHistory,
                       generationConfig: {
                           responseMimeType: "application/json",
                           responseSchema: {
                               type: "OBJECT",
                               properties: {
                                   "diagnosis": { "type": "STRING" },
                                   "severity": { "type": "STRING" },
                                   "therapyTip": { "type": "STRING" },
                                   "playlist": {
                                       "type": "ARRAY",
                                       "items": { "type": "STRING" }
                                   }
                               },
                               "propertyOrdering": ["diagnosis", "severity", "therapyTip", "playlist"]
                           }
                       }
                   };
                   const apiKey = ""; // Canvas will provide this at runtime
                   const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                   const response = await fetch(apiUrl, {
                       method: 'POST',
                       headers: { 'Content-Type': 'application/json' },
                       body: JSON.stringify(payload)
                   });

                   const result = await response.json();
                   
                   let data;
                   if (result.candidates && result.candidates.length > 0 &&
                       result.candidates[0].content && result.candidates[0].content.parts &&
                       result.candidates[0].content.parts.length > 0) {
                       const jsonString = result.candidates[0].content.parts[0].text;
                       data = JSON.parse(jsonString);
                   } else {
                       throw new Error("Invalid response structure from AI.");
                   }

                   // Populate and animate results
                   await typeWriterEffect(diagnosisText, data.diagnosis, 40);
                   await typeWriterEffect(severityText, `Severity: ${data.severity.toUpperCase()} Rekt`, 40);
                   await typeWriterEffect(therapyTipText, data.therapyTip, 30);

                   playlistItems.innerHTML = ''; // Clear previous playlist items
                   for (const song of data.playlist) {
                       const li = document.createElement('li');
                       li.classList.add('playlist-item');
                       playlistItems.appendChild(li);
                       await typeWriterEffect(li, song, 25);
                       await new Promise(resolve => setTimeout(resolve, 200)); // Small delay between songs
                   }

               } catch (error) {
                   console.error('Error analyzing rekt:', error);
                   showMessageBox("Failed to analyze your rekt. Please try again later or refine your input.");
                   diagnosisText.textContent = 'Analysis Failed';
                   severityText.textContent = '';
                   therapyTipText.textContent = 'There was an error getting your therapy. Please try again.';
                   playlistItems.innerHTML = '';
               }
           });

           // --- Meme Generator Functionality ---
           const memePromptInput = document.getElementById('meme-prompt');
           const generateMemeButton = document.getElementById('generate-meme-button');
           const memePreview = document.getElementById('meme-preview');
           const generatedMemeImage = document.getElementById('generated-meme-image');
           const memePlaceholder = document.getElementById('meme-placeholder');

           generateMemeButton.addEventListener('click', async () => {
               const prompt = memePromptInput.value.trim();
               if (!prompt) {
                   showMessageBox("Please enter a description for your meme.");
                   return;
               }

               // Show loading state
               memePlaceholder.style.display = 'none';
               generatedMemeImage.style.display = 'none';
               memePreview.classList.add('loading');

               try {
                   const payload = { instances: { prompt: prompt }, parameters: { "sampleCount": 1} };
                   const apiKey = ""; // Canvas will provide this at runtime
                   const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

                   const response = await fetch(apiUrl, {
                               method: 'POST',
                               headers: { 'Content-Type': 'application/json' },
                               body: JSON.stringify(payload)
                           });
                   const result = await response.json();

                   if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
                       const imageUrl = `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
                       generatedMemeImage.src = imageUrl;
                       generatedMemeImage.style.display = 'block';
                   } else {
                       throw new Error("No image data received.");
                   }
               } catch (error) {
                   console.error('Error generating meme:', error);
                   showMessageBox("Failed to generate meme. Please try again later. Error: " + error.message);
                   generatedMemeImage.style.display = 'none';
                   memePlaceholder.textContent = 'Meme generation failed. Try a different prompt!';
                   memePlaceholder.style.display = 'block';
               } finally {
                   memePreview.classList.remove('loading');
               }
           });
       });
   </script>
</body>
</html>