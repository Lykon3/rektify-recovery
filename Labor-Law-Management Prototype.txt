<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Wage Claim Assistant</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
        }


        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
            width: 100%;
            max-width: 700px;
            height: 85vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }


        .header {
            background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
            padding: 1.5rem;
            color: white;
            text-align: center;
            position: relative;
            overflow: hidden;
        }


        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 50%);
            animation: shimmer 6s ease-in-out infinite;
        }


        @keyframes shimmer {
            0%, 100% { transform: rotate(0deg); }
            50% { transform: rotate(180deg); }
        }


        .chat-area {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            background: linear-gradient(to bottom, #f8fafc, #e2e8f0);
        }


        .message {
            max-width: 85%;
            padding: 1rem 1.25rem;
            border-radius: 20px;
            animation: slideIn 0.3s ease-out;
            position: relative;
        }


        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }


        .user-message {
            align-self: flex-end;
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
            border-bottom-right-radius: 8px;
            box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
        }


        .ai-message {
            align-self: flex-start;
            background: white;
            color: #1f2937;
            border-bottom-left-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }


        .ai-message ul {
            margin: 0.5rem 0;
            padding-left: 1.25rem;
        }


        .ai-message li {
            margin: 0.25rem 0;
        }


        .input-area {
            padding: 1.5rem;
            background: white;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }


        .input-container {
            flex: 1;
            position: relative;
        }


        .input-area textarea {
            width: 100%;
            min-height: 50px;
            max-height: 120px;
            padding: 0.75rem 1rem;
            border: 2px solid #e5e7eb;
            border-radius: 16px;
            resize: none;
            font-size: 1rem;
            line-height: 1.5;
            outline: none;
            transition: all 0.2s ease;
            background: #f9fafb;
        }


        .input-area textarea:focus {
            border-color: #3b82f6;
            background: white;
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
        }


        .send-button {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
            border: none;
            padding: 0.875rem 1.5rem;
            border-radius: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
            min-width: 80px;
        }


        .send-button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
        }


        .send-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }


        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(8px);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }


        .loading-overlay.active {
            opacity: 1;
            visibility: visible;
        }


        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(59, 130, 246, 0.2);
            border-left: 4px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }


        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }


        .typing-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 1rem 1.25rem;
            background: white;
            border-radius: 20px;
            border-bottom-left-radius: 8px;
            max-width: 85%;
            align-self: flex-start;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }


        .typing-dot {
            width: 8px;
            height: 8px;
            background: #9ca3af;
            border-radius: 50%;
            animation: typing 1.4s infinite ease-in-out;
        }


        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }


        @keyframes typing {
            0%, 80%, 100% {
                transform: scale(0);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }


        .example-prompts {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }


        .example-prompt {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
            padding: 0.5rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid rgba(59, 130, 246, 0.2);
        }


        .example-prompt:hover {
            background: rgba(59, 130, 246, 0.2);
            transform: translateY(-1px);
        }


        /* Responsive adjustments */
        @media (max-width: 768px) {
            .container {
                height: 95vh;
                border-radius: 16px;
                margin: 0.5rem;
            }
            
            .header {
                padding: 1rem;
            }
            
            .chat-area {
                padding: 1rem;
            }
            
            .input-area {
                padding: 1rem;
            }
            
            .message {
                max-width: 90%;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="text-2xl font-bold mb-2 relative z-10">⚖️ AI Wage Claim Assistant</h1>
            <p class="text-sm opacity-90 relative z-10">Get help structuring your wage theft claim with AI-powered analysis</p>
        </div>


        <div id="chatArea" class="chat-area">
            <div class="ai-message message">
                <div class="mb-2">
                    <strong>👋 Welcome!</strong> I'm here to help you organize your wage theft claim information.
                </div>
                <div class="text-sm text-gray-600 mb-3">
                    Please describe your situation in detail. I'll analyze it and provide a structured summary of your potential claim.
                </div>
                <div class="example-prompts">
                    <div class="example-prompt" onclick="fillExample('My employer hasn\'t paid me overtime for 25 hours last month. My hourly rate is $18/hour.')">
                        💰 Unpaid overtime
                    </div>
                    <div class="example-prompt" onclick="fillExample('I worked 60 hours last week but only got paid for 40 hours at $12/hour.')">
                        ⏰ Missing hours
                    </div>
                    <div class="example-prompt" onclick="fillExample('My final paycheck was never given to me when I quit 3 weeks ago.')">
                        📋 Final paycheck
                    </div>
                </div>
            </div>
        </div>


        <div class="input-area">
            <div class="input-container">
                <textarea 
                    id="userInput" 
                    placeholder="Describe your wage theft situation in detail..."
                    rows="1"
                ></textarea>
            </div>
            <button id="sendButton" class="send-button">
                <span id="sendText">Send</span>
            </button>
        </div>


        <div id="loadingOverlay" class="loading-overlay">
            <div class="spinner"></div>
        </div>
    </div>


    <script>
        // DOM elements
        const chatArea = document.getElementById('chatArea');
        const userInput = document.getElementById('userInput');
        const sendButton = document.getElementById('sendButton');
        const sendText = document.getElementById('sendText');
        const loadingOverlay = document.getElementById('loadingOverlay');


        // Chat history for context
        let chatHistory = [];
        let isProcessing = false;


        // Auto-resize textarea
        userInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });


        // Event listeners
        sendButton.addEventListener('click', sendMessage);
        userInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });


        // Fill example text
        function fillExample(text) {
            userInput.value = text;
            userInput.focus();
            userInput.style.height = 'auto';
            userInput.style.height = Math.min(userInput.scrollHeight, 120) + 'px';
        }


        // Show typing indicator
        function showTypingIndicator() {
            const typingDiv = document.createElement('div');
            typingDiv.className = 'typing-indicator';
            typingDiv.id = 'typing-indicator';
            typingDiv.innerHTML = `
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <span class="text-sm text-gray-500 ml-2">AI is analyzing...</span>
            `;
            chatArea.appendChild(typingDiv);
            chatArea.scrollTop = chatArea.scrollHeight;
        }


        // Remove typing indicator
        function removeTypingIndicator() {
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }


        // Send message function
        async function sendMessage() {
            const userText = userInput.value.trim();
            if (!userText || isProcessing) return;


            isProcessing = true;
            appendMessage('user', userText);
            
            // Clear and reset input
            userInput.value = '';
            userInput.style.height = 'auto';
            
            // Update UI state
            sendButton.disabled = true;
            sendText.textContent = 'Processing...';
            showTypingIndicator();


            try {
                // Simulate API call (replace with actual Gemini API call)
                await simulateAIResponse(userText);
            } catch (error) {
                console.error('Error:', error);
                removeTypingIndicator();
                appendMessage('AI', `
                    <div class="text-red-600 font-semibold mb-2">⚠️ Error Processing Request</div>
                    <div class="text-sm">
                        I encountered an issue analyzing your claim. This could be due to:
                        <ul class="mt-2 list-disc pl-4">
                            <li>API connectivity issues</li>
                            <li>Invalid API key configuration</li>
                            <li>Service temporarily unavailable</li>
                        </ul>
                        <div class="mt-3 p-3 bg-blue-50 rounded-lg">
                            <strong>Please try again</strong> or contact support if the issue persists.
                        </div>
                    </div>
                `);
            } finally {
                // Reset UI state
                isProcessing = false;
                sendButton.disabled = false;
                sendText.textContent = 'Send';
                userInput.focus();
            }
        }


        // Simulate AI response (replace with actual API call)
        async function simulateAIResponse(userText) {
            // Add delay to simulate processing
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            removeTypingIndicator();
            
            // Mock structured response
            const mockResponse = {
                claimType: "Unpaid Overtime",
                datesInvolved: "Last month",
                amountsOwed: "Approximately $450",
                employerName: "N/A",
                employeeName: "N/A", 
                hourlyRate: "$18/hour",
                hoursUnpaid: "25 hours overtime",
                description: `User reports unpaid overtime hours from their employer. Based on the details provided, this appears to be a violation of overtime pay requirements.`,
                potentialNextSteps: [
                    "Gather all pay stubs and timesheets from the affected period",
                    "Document your regular work schedule and overtime hours",
                    "Contact your state's Department of Labor to file a complaint",
                    "Consider consulting with an employment attorney",
                    "Keep detailed records of all communications with your employer"
                ]
            };


            // Format response for display
            let responseHtml = `
                <div class="mb-4">
                    <div class="text-lg font-semibold text-green-700 mb-2">📋 Claim Analysis Complete</div>
                    <div class="text-sm text-gray-600 mb-3">Here's a structured summary of your potential wage claim:</div>
                </div>
                
                <div class="space-y-3">
            `;


            // Add each field
            Object.entries(mockResponse).forEach(([key, value]) => {
                const label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
                
                if (Array.isArray(value)) {
                    responseHtml += `
                        <div class="border-l-4 border-blue-500 pl-3">
                            <div class="font-semibold text-gray-800">${label}:</div>
                            <ul class="mt-1 space-y-1">
                                ${value.map(item => `<li class="text-sm text-gray-700">• ${item}</li>`).join('')}
                            </ul>
                        </div>
                    `;
                } else if (value && value !== 'N/A') {
                    responseHtml += `
                        <div class="border-l-4 border-blue-500 pl-3">
                            <div class="font-semibold text-gray-800">${label}:</div>
                            <div class="text-sm text-gray-700">${value}</div>
                        </div>
                    `;
                }
            });


            responseHtml += `
                </div>
                <div class="mt-4 p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                    <div class="text-sm text-yellow-800">
                        <strong>💡 Next Steps:</strong> This analysis provides a foundation for your claim. Consider saving this information and consulting with legal professionals for specific advice.
                    </div>
                </div>
            `;


            appendMessage('AI', responseHtml);
        }


        // Append message to chat
        function appendMessage(sender, content) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender === 'user' ? 'user-message' : 'ai-message'}`;
            messageDiv.innerHTML = content;
            
            chatArea.appendChild(messageDiv);
            chatArea.scrollTop = chatArea.scrollHeight;
        }


        // Focus input on load
        userInput.focus();
    </script>
</body>
</html>