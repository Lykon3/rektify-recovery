import React, { useState, useEffect } from 'react';
import { TrendingUp, TrendingDown, Award, Calendar, Zap, Shield, Users } from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';


const RecoveryDashboard = () => {
  const [userData, setUserData] = useState({
    walletAddress: '0x742d...3821',
    joinDate: '2024-12-15',
    totalReports: 23,
    avgSeverity: 8.2,
    currentStreak: 3,
    totalLosses: 45670,
    badges: ['Early Degen', 'Rock Bottom', 'Pattern Recognizer'],
    referralCode: 'DEGEN42',
    referralEarnings: 120,
    premiumStatus: true
  });


  const [severityHistory, setSeverityHistory] = useState([
    { date: 'Dec 15', severity: 9.8, loss: 12000 },
    { date: 'Dec 22', severity: 8.9, loss: 8500 },
    { date: 'Dec 29', severity: 8.5, loss: 6200 },
    { date: 'Jan 5', severity: 7.2, loss: 4300 },
    { date: 'Jan 12', severity: 6.8, loss: 2100 },
    { date: 'Today', severity: 5.9, loss: 1200 }
  ]);


  const [showReferralModal, setShowReferralModal] = useState(false);
  const [showBadgeModal, setShowBadgeModal] = useState(false);
  const [selectedBadge, setSelectedBadge] = useState(null);


  // Calculate improvement
  const improvement = ((severityHistory[0].severity - severityHistory[severityHistory.length - 1].severity) / severityHistory[0].severity * 100).toFixed(1);
  const isHealing = severityHistory[severityHistory.length - 1].severity < 7;


  // Badge definitions
  const allBadges = {
    'Early Degen': { icon: '🌅', description: 'Joined in the first week', rarity: 'Legendary' },
    'Rock Bottom': { icon: '⛏️', description: 'Hit 10/10 severity', rarity: 'Common' },
    'Pattern Recognizer': { icon: '🧠', description: '3+ similar mistakes identified', rarity: 'Rare' },
    'Diamond Hands': { icon: '💎', description: 'Lost 90% and still here', rarity: 'Epic' },
    'Therapy Graduate': { icon: '🎓', description: 'Severity below 5 for 7 days', rarity: 'Mythic' },
    'Whale Watcher': { icon: '🐋', description: 'Lost over $100k total', rarity: 'Legendary' }
  };


  const mintBadge = (badge) => {
    console.log(`Minting ${badge} as NFT...`);
    // NFT minting logic here
  };


  return (
    <div className="min-h-screen bg-black text-white p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header with Streak */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-green-500 to-blue-500 bg-clip-text text-transparent">
              Recovery Dashboard
            </h1>
            <div className="flex items-center gap-4">
              <div className="bg-gray-900 rounded-lg px-4 py-2 border border-gray-800">
                <p className="text-sm text-gray-400">Current Streak</p>
                <p className="text-2xl font-bold flex items-center gap-1">
                  🔥 {userData.currentStreak} days
                </p>
              </div>
            </div>
          </div>
          
          {isHealing && (
            <div className="bg-gradient-to-r from-green-900/20 to-blue-900/20 rounded-xl p-4 border border-green-800">
              <p className="text-xl font-bold text-green-400">
                🎉 You're Healing! Severity dropped {improvement}% since you started
              </p>
            </div>
          )}
        </div>


        {/* Progress Chart */}
        <div className="bg-gray-900 rounded-xl p-6 border border-gray-800 mb-8">
          <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
            <TrendingDown className="w-6 h-6 text-green-500" />
            Your Recovery Journey
          </h2>
          
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={severityHistory}>
              <CartesianGrid strokeDasharray="3 3" stroke="#333" />
              <XAxis dataKey="date" stroke="#666" />
              <YAxis stroke="#666" />
              <Tooltip 
                contentStyle={{ backgroundColor: '#1a1a1a', border: '1px solid #333' }}
                labelStyle={{ color: '#999' }}
              />
              <Line 
                type="monotone" 
                dataKey="severity" 
                stroke="#ef4444" 
                strokeWidth={3}
                dot={{ fill: '#ef4444', r: 6 }}
              />
            </LineChart>
          </ResponsiveContainer>
          
          <div className="grid grid-cols-3 gap-4 mt-6">
            <div className="bg-black rounded-lg p-4 border border-gray-700">
              <p className="text-gray-400 text-sm">Avg Severity</p>
              <p className="text-2xl font-bold">{userData.avgSeverity}/10</p>
              <p className="text-xs text-green-400">↓ 15% this month</p>
            </div>
            <div className="bg-black rounded-lg p-4 border border-gray-700">
              <p className="text-gray-400 text-sm">Total Reports</p>
              <p className="text-2xl font-bold">{userData.totalReports}</p>
              <p className="text-xs text-gray-500">Knowledge is power</p>
            </div>
            <div className="bg-black rounded-lg p-4 border border-gray-700">
              <p className="text-gray-400 text-sm">Total Losses</p>
              <p className="text-2xl font-bold text-red-500">${userData.totalLosses.toLocaleString()}</p>
              <p className="text-xs text-gray-500">F in the chat</p>
            </div>
          </div>
        </div>


        {/* Badges Section */}
        <div className="bg-gray-900 rounded-xl p-6 border border-gray-800 mb-8">
          <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
            <Award className="w-6 h-6 text-yellow-500" />
            Your Badges of Dishonor
          </h2>
          
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {userData.badges.map((badge) => (
              <button
                key={badge}
                onClick={() => {
                  setSelectedBadge(badge);
                  setShowBadgeModal(true);
                }}
                className="bg-black rounded-lg p-4 border border-gray-700 hover:border-yellow-600 transition-all group"
              >
                <div className="text-4xl mb-2">{allBadges[badge].icon}</div>
                <p className="font-bold">{badge}</p>
                <p className="text-xs text-gray-400">{allBadges[badge].rarity}</p>
                <p className="text-xs text-yellow-500 opacity-0 group-hover:opacity-100 mt-2">
                  Click to mint NFT
                </p>
              </button>
            ))}
            
            {/* Locked badges */}
            <div className="bg-black rounded-lg p-4 border border-gray-800 opacity-50">
              <div className="text-4xl mb-2">🔒</div>
              <p className="font-bold text-gray-500">???</p>
              <p className="text-xs text-gray-600">Keep degening to unlock</p>
            </div>
          </div>
        </div>


        {/* Referral Section */}
        <div className="bg-gradient-to-r from-purple-900/20 to-pink-900/20 rounded-xl p-6 border border-purple-800 mb-8">
          <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
            <Users className="w-6 h-6 text-purple-500" />
            Spread the Therapy
          </h2>
          
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <p className="text-gray-400 mb-2">Your Referral Code</p>
              <div className="flex items-center gap-2">
                <code className="bg-black px-4 py-2 rounded-lg text-xl font-mono border border-purple-700">
                  {userData.referralCode}
                </code>
                <button
                  onClick={() => {
                    navigator.clipboard.writeText(userData.referralCode);
                    setShowReferralModal(true);
                  }}
                  className="bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded-lg transition-all"
                >
                  Copy
                </button>
              </div>
              <p className="text-sm text-gray-400 mt-2">
                Friends get 50% off premium
              </p>
            </div>
            
            <div>
              <p className="text-gray-400 mb-2">Your Earnings</p>
              <p className="text-3xl font-bold text-green-500">${userData.referralEarnings}</p>
              <p className="text-sm text-gray-400">
                From 12 degens you've saved
              </p>
            </div>
          </div>
        </div>


        {/* Milestones */}
        <div className="bg-gray-900 rounded-xl p-6 border border-gray-800">
          <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
            <Zap className="w-6 h-6 text-yellow-500" />
            Upcoming Milestones
          </h2>
          
          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 bg-black rounded-lg border border-gray-700">
              <div>
                <p className="font-bold">7-Day Low Severity Streak</p>
                <p className="text-sm text-gray-400">Keep severity below 7 for 7 days</p>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-400">Progress</p>
                <p className="font-bold text-green-500">4/7 days</p>
              </div>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-black rounded-lg border border-gray-700">
              <div>
                <p className="font-bold">Pattern Breaker</p>
                <p className="text-sm text-gray-400">Avoid your top mistake for 2 weeks</p>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-400">Progress</p>
                <p className="font-bold text-yellow-500">8/14 days</p>
              </div>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-black rounded-lg border border-gray-700">
              <div>
                <p className="font-bold">Therapy Graduate</p>
                <p className="text-sm text-gray-400">Complete 30 therapy sessions</p>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-400">Progress</p>
                <p className="font-bold text-blue-500">23/30 sessions</p>
              </div>
            </div>
          </div>
        </div>


        {/* Generate Recovery Meme */}
        {isHealing && (
          <div className="mt-8 text-center">
            <button className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 px-8 py-4 rounded-xl font-bold text-xl transition-all">
              🎉 Generate "I'm Healing" Meme
            </button>
            <p className="text-sm text-gray-400 mt-2">
              Share your progress and inspire other degens
            </p>
          </div>
        )}
      </div>


      {/* Modals */}
      {showReferralModal && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center p-4 z-50">
          <div className="bg-gray-900 rounded-xl p-6 max-w-md border border-gray-700">
            <h3 className="text-2xl font-bold mb-4">Code Copied! 📋</h3>
            <p className="text-gray-400 mb-4">
              Share your code on Twitter:
            </p>
            <p className="bg-black p-4 rounded-lg text-sm">
              "Just found out I'm healing from my degen ways. Down {improvement}% severity on @RektifyApp 
              
              Use code {userData.referralCode} for 50% off therapy 🧠"
            </p>
            <button
              onClick={() => setShowReferralModal(false)}
              className="mt-4 bg-purple-600 hover:bg-purple-700 px-6 py-2 rounded-lg w-full"
            >
              Share on Twitter
            </button>
          </div>
        </div>
      )}


      {showBadgeModal && selectedBadge && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center p-4 z-50">
          <div className="bg-gray-900 rounded-xl p-6 max-w-md border border-gray-700">
            <div className="text-center mb-4">
              <div className="text-6xl mb-2">{allBadges[selectedBadge].icon}</div>
              <h3 className="text-2xl font-bold">{selectedBadge}</h3>
              <p className="text-sm text-gray-400">{allBadges[selectedBadge].rarity} Badge</p>
            </div>
            <p className="text-gray-300 mb-6">
              {allBadges[selectedBadge].description}
            </p>
            <button
              onClick={() => {
                mintBadge(selectedBadge);
                setShowBadgeModal(false);
              }}
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 px-6 py-3 rounded-lg w-full font-bold"
            >
              Mint as NFT
            </button>
            <button
              onClick={() => setShowBadgeModal(false)}
              className="mt-2 text-gray-400 hover:text-white w-full"
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};


export default RecoveryDashboard;